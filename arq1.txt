// GIT
// criando arquivo para versionar
touch arq1.txt

###################################################
CONFIGURAÇÃO
// setando email
git config --global user.email "##############@gmail.com"

// setando nome
git config --global user.name "#####23"

// setando vim como editor padrão no git
git config --global core.editor "vim"

// verificando quem é o user setado no meu git
git config user.name
josue23
// verificando qual o e-mail setado
git config user.email
##############@gmail.com
// exibindo todas as configurações
git config --list
user.email=##############@gmail.com
user.name=josue23
core.editor=vim
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=https://github.com/Josue23/curso-git.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
################################################################

// inicializando o repositório
git init

// verificar a situação dos arquivos no repositório
git status
	Untracked files:
	arquivo não rastreado ainda

################################################################
CICLO DE VIDA DOS STATUS DOS ARQUIVOS
- O git separa em quatro estados bem definidos como os arquivos vão ser:
1 - untracked
	O arquivo acabou de ser adicionado no repositório mas ainda não foi visto
pelo git. Ainda não tem versão.
	ex: touch example.txt
2 - unmodified
	Depois que o arquivo é adicionado ao git
3 - modified
	Depois que o arquivo é editado
	echo "inserindo texto" >> example.txt
	preciso dar git add example.txt para adicionar as alterações que fiz agora
4 - staged
	ex: git add example.txt
	Área onde vai ser criado a versão
	Depois de ser modificado o arquivo
	Status antes do commit
	Depois de fazer o commit os arquivos voltam para unmodified e o processo
começa todo novamente

// rastrear o arquivo
git add arq1.txt

git status
Changes to be committed:

// commitar arquivo no repositório
git commit -m "arquivo inicial"

// alterando o arquivo arq1.txt
altera o arq1.txt
git add arq1.txt
git commit "mensagem do commit"
#####################################################################


########################################################
// GITHUB
// criando um repositório no https://github.com/
https://github.com/new
// após seguir todos os passos na url acima
// vai ser criado um repositório vazio

// apontando o projeto para o github
// linkando o projeto que está no github com a minha pasta local que estou no
momento
git remote add origin https://github.com/Josue23/curso-git.git

// enviando as alterações para o github
git push origin master




#########################################################
// OBTENTO O PROJETO DO GITHUB
cd ..
mkdir teste
cd teste/

https://github.com/Josue23/curso-git
// clico no botão verde "clone or download", copio a url
git clone https://github.com/Josue23/curso-git.git

cd curso-git/
// o projeto vem completo, inclusive com os logs
git log

// rastreando todos os arquivos
// voltando para o diretório do projeto
josh@dell ~/Dropbox/udemy/curso-git-github/teste/curso-git $ cd ../../repositorio/

// criando mais dois arquivos para versionar dentro do projeto
touch codigo1.py codigo2.py

// rastrear todos os arquivos
git add .

// cominatando os arquivos recém adicionados
git commit -m "adicionados mais dois arquivos de código"

// enviando os arquivos recém adicionados para o github
git push origin master

// .gitignore
touch .gitignore
echo "todo.txt" >> .gitignore // inserindo todo.txt dentro de .gitignore
// o arquivo .gitignore é para ser rastreado
// o conteúdo do .gitignore não é para ser rastreado


git add .
git status
git commit -m "adicionado o arquivo .gitignore"
git push origin master


// rastreando e cominatando ao mesmo tempo
git commit -am "rastreando e comitando ao mesmo tempo"

// voltar o aplicativo a um estado anterior
git log  // exibe os logs
		 // eu copio o hash do commit para o qual eu quero voltar

git checkout cca9ab46a08cf910a8ac770dc1f34bf2bd408527
HEAD is now at cca9ab4... adicionado o arquivo .gitignore


// voltando para o último commit
git checkout 3d9f2201dc20ef7ef7adf569e0d727137afd22f4

#####################################################
GIT LOG, GIT SHOW e GIT DIFF
// verificando o histórico do repositório
// exibir os três últimos commits com algumas informações:
	de qual branch para qual branch
	se houve merge entre branches
git log -n 3 --decorate

// exibis os últimos três commits do autor josue23
git log -n 3 --author="josue23"

// exibe os commits em ordem alfabética por autor com o total de commits e os
respsctivos commits
git shortlog
git shortlog -sn   // exibe somente a quantidade de commits e o autor
    24  josue23
git log --graph    // exibe o histórico das branches com gráfico

// exibe o autor, o que foi adicionado, o que foi deletado a data, qual a hash
GIT SHOW
git show 1949d810cf0a3e0ff8e4f0f2351748e8fbab2285


// exibir o resumo dos últimos dois commits
git log -n 2 --oneline
3d9f220 rastreando e comitando ao mesmo tempo
cca9ab4 adicionado o arquivo .gitignore

// exibir resumo dos arquivos alterados nos últimos três commits
git log -n 3 --stat

GIT DIFF
// permite verificar as alterações antes de salvar a versão e fazer o commit
git diff
git diff --name-only   // exibe somente o nome dos arquivos modificados


###########################################################
###########################################################
DESFAZENDO COISAS
rm codigo2.py       // deleta codigo2.py do diretório
git add codigo2.py  // envia codigo2.py para a stage area
git status
	deleted:    codigo2.py
git commit -m "deletando o arquivo codigo2.py"
git push origin master


// renomeando arquivos versionados
git mv codigo1.py codigo.py
git status
	renamed:    codigo1.py -> codigo.py

// desfazendo mudanças que ainda não são rastreadas
echo "mudança" >> arq1.txt    // inserindo a palavra mudança em arq1.txt
git checkout -- arq1.txt      // desfaz as alterações em arq1.txt


// removendo arquivo e recuperando em seguida
git rm arq1.txt            // deleta arq1.txt
git checkout HEAD arq1.txt // recupera arq1.txt

// desfazendo mudanças rastreadas
echo "python" >> arq1.txt     // inserindo a palavra python em arq1.txt
git add .                     // inserindo arq1.txt na stage area
git reset                     // retira todo mundo que está na stage area
git reset --hard              // retira tudo da stage area e desfaz as alterações


// desfaz mudanças comitadas
git reset HEAD~1       // desfaz o último commit
                       // o arquivo volta para a stage area
git reset --hard       // desfaz todas as alterações que estão na stage area 



#################################################
BRANCH
// criando uma nova branch
git branch novo-branch

// listando as branches
git branch
* master
  novo-branch


// trocando de branch
git checkout novo-branch
M	arq1.txt
Switched to branch 'novo-branch'

// verificando
git branch
  master
* novo-branch


// criando e trocando de branch
git checkout -b design       // cria a branch design e muda para a mesma

// deletando uma branch    // não posso estar na branch que quero deletar
git branch -d novo-branch
git branch -D novo-branch  // uso -D quando tenho commit na branch
Deleted branch novo-branch (was 7317eb2).

// criando uma nova branch e mudando para a mesma
git checkout -b nova_branch
M	arq1.txt
Switched to a new branch 'nova_branch'

git branch                     // me certificando que estou na nova_branch
  master
* nova_branch

echo "alteração" >> arq1.txt       // fazendo alteração na nova_branch
git commit -am "alteração em arq1" // comitando na nova_branch
git push origin nova_branch        // enviando alterações para o repositório
remoto nova_branch

// mergeando duas branches
git checkout master         // muda para a branch master
Switched to branch 'master'

git branch --no-merged    // verificando as branches que não estão mescladas
  nova_branch

git merge nova_branch -m "mesclando branches"
Updating 7317eb2..c494379
Fast-forward (no commit created; -m option ignored)
 arq1.txt | 37 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 36 insertions(+), 1 deletion(-)


git pull origin master
git push origin master
